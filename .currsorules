# Disable all markdown processing
disable_markdown: true

# File patterns to completely ignore
ignore:
  - "*.md"
  - "*.markdown"
  - "*.MD"
  - "README*"
  - "PUBLISHING*"
  - "LICENSE*"
  - "*.toml"
  - "*.yaml"
  - "*.yml"
  - "docs/*"
  - ".github/*"

# Directory patterns to ignore
ignore_dirs:
  - ".git"
  - "__pycache__"
  - "*.egg-info"
  - "dist"
  - "build"
  - "docs"

# Language settings
python:
  enabled: true
  lint: true
  format: true
  typing:
    required: true
    strict: true
  docstrings:
    required: true
    style: "pep257"
  test:
    framework: "pytest"
    plugins:
      - "pytest-mock"
      - "pytest-cov"
      - "pytest-asyncio"
    fixtures:
      - "CaptureFixture"
      - "FixtureRequest"
      - "LogCaptureFixture"
      - "MonkeyPatch"
      - "MockerFixture"
  dependencies:
    manager: "uv"
    virtual_env: true
  style:
    formatter: "ruff"
    line_length: 88
    import_order: true
  problem_solving:
    pattern: "Think smart about errors:"
    checklist:
    order-of-thought:"""
     0 - "Will fixing one fix many?"
     1 - "Is there a root cause?"
     2 - "Is there a common pattern?"
     3 - "What Python libraries could help?"
"""
# Testing requirements
test_requirements:
  - location: "./tests"
  - init_files: true
  - typing: true
  - docstrings: true
  - framework: "pytest"
  - annotations: true

# CI/CD settings
ci_cd:
  provider: "github-actions"
  checks:
    - typing
    - lint
    - test
    - coverage

# AI Development settings
ai_development:
  docstring_format: "google"
  type_annotations: true
  error_handling: true
  logging: true
  modular_design: true
  configuration: "env_vars"

# Global settings
spell_check: false

# Problem solving strategy
problem_solving_strategy:
  steps:
    - identify_patterns:
        description: "Look for common patterns in errors"
        question: "Is there a recurring theme in these errors?"
    
    - library_solutions:
        description: "Check for existing library solutions"
        question: "Is there a Python/framework library that solves this?"
    
    - root_cause:
        description: "Find the root cause"
        question: "Can fixing one issue solve multiple problems?"
    
    - solution_impact:
        description: "Evaluate solution impact"
        question: "How will this solution affect other parts of the code?"
    
    - check_hardcoded_values:
        description: "Always check for hardcoded values first"
        questions:
          - "Are there any hardcoded values like 'test-key'?"
          - "Is this a placeholder someone added?"
          - "Could this be overriding environment variables?"
        rules:
          - "Never use placeholder values in code"
          - "Use empty strings or None as defaults"
          - "Use comments for developer guidance"
        examples:
          bad: |
            api_key = "test-key"  # Bad: Hardcoded placeholder
          good: |
            api_key = ""  # Good: Empty default
            # Developer: Set OPENAI_API_KEY in .env file
            
    - simplest_solution_first:
        description: "Look for the simplest fix first"
        questions:
          - "Could this be a simple hardcoded value?"
          - "Are we overcomplicating the solution?"
          - "What's the fastest way to verify?"
        rules:
          - "Search for hardcoded values before adding complexity"
          - "Fix at source rather than adding layers"
          - "Use grep/search before creating new systems"

# AI First Strategy
ai_first_strategy:
  principles:
    - leverage_ai_strengths:
        description: "Use AI's natural capabilities first"
        questions:
          - "Can AI handle this natively?"
          - "Are we overcomplicating what AI does well?"
          - "Are we reinventing AI functionality?"
    
    - simplify_before_building:
        description: "Remove unnecessary complexity"
        questions:
          - "Are we building something AI already does?"
          - "Can we remove layers between AI and task?"
          - "Is our code getting in AI's way?"
    
    - focus_on_integration:
        description: "Focus on connecting, not recreating"
        questions:
          - "How can we best connect to AI capabilities?"
          - "What's the minimal code needed?"
          - "Are we adding value or just layers?"

    - measure_complexity:
        description: "Evaluate solution complexity"
        metrics:
          - "Lines of our code vs AI utilization"
          - "Number of potential failure points"
          - "Maintenance burden"

# Problem Solving Workflow
problem_solving_workflow:
  steps:
    1. identify_ai_capabilities:
        question: "What can AI already do here?"
        example: "CrewAI can analyze code without our file walking"
    
    2. remove_unnecessary_code:
        question: "What code can we remove?"
        example: "Remove manual file analysis, trust CrewAI"
    
    3. enhance_ai_integration:
        question: "How can we better integrate with AI?"
        example: "Use CrewAI's native code understanding"
    
    4. validate_simplification:
        question: "Is this simpler than before?"
        metrics:
          - Code reduction
          - Fewer error cases
          - Better AI utilization

# Add to existing .currsorules

# Content modification rules
content_modification:
  rules:
    - never_remove_existing:
        enabled: true
        description: "Never remove existing content, only add new content"
        policy: "append_only"
    
    - no_placeholders:
        enabled: true
        description: "Never use placeholder values in code"
        forbidden_patterns:
          - "test-key"
          - "your-key-here"
          - "placeholder"
          - "xxx-xxx"
        alternatives:
          - "Use empty string ''"
          - "Use None"
          - "Use descriptive comments"
    
    - sensitive_data:
        enabled: true
        description: "Handle sensitive data appropriately"
        rules:
          - "Keep existing API keys and tokens as is"
          - "Do not replace with placeholders"
          - "Add warnings about security when relevant"
          - "Use .env.example for new installations only"

# Update strategy
update_strategy:
  method: "append_only"
  rules:
    - "Always add to end of sections"
    - "Never modify existing rules"
    - "Keep all historical rules"
    - "Only append new configurations"

# Add to existing .currsorules

git_strategy:
  commit_rules:
    - sensitive_data:
        description: "Handle sensitive data in commits"
        rules:
          - "Never commit .env files"
          - "Use .env.example.template for examples"
          - "Remove API keys before committing"
          - "Check git diff for sensitive data"
        error_patterns:
          - "*.env"
          - "*api_key*"
          - "*secret*"
          - "*password*"

    - commit_organization:
        description: "Organize commits logically"
        structure:
          - core_files:
              - "*.py"
              - "*.json"
              - "pyproject.toml"
          - documentation:
              - "*.md"
              - "docs/"
              - "DEV-MAN-CREW/"
          - scripts:
              - "scripts/"
              - "*.sh"
          - tests:
              - "tests/"
              - "conftest.py"

    - commit_messages:
        description: "Structure commit messages"
        template: |
          üèóÔ∏è {emoji} {short_description}

          CHANGES:
          ---------
          {detailed_changes}

          TECHNICAL DETAILS:
          -----------------
          {technical_notes}

          SECURITY:
          ---------
          - [ ] No sensitive data
          - [ ] No API keys
          - [ ] No credentials

          DOCUMENTATION:
          -------------
          - [ ] Updated relevant docs
          - [ ] Added new docs if needed

          CODED BY THE AI RE INVESTOR -- WWW.THEAIREINVESTOR.COM
          For AI Development & Consulting Services
          Call: 405-963-2596
