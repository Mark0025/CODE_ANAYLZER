# Monitoring Enhancement YAML
update_plan:
  name: "Enhance Monitoring"
  description: "Upgrade monitoring capabilities"
  priority: "HIGH"
  
  phases:
    1_enhance_models:
      description: "Enhance monitoring models"
      changes:
        - type: "modify_file"
          target: "code_analyzer/monitoring/models.py"
          content: |
            """Enhanced monitoring models."""
            from sqlalchemy import create_engine, Column, Integer, String, Float, DateTime, JSON
            from sqlalchemy.ext.declarative import declarative_base
            from datetime import datetime
            from pathlib import Path
            
            Base = declarative_base()
            
            class APICall(Base):
                """Track API calls and usage."""
                __tablename__ = 'api_calls'
                
                id = Column(Integer, primary_key=True)
                timestamp = Column(DateTime, default=datetime.utcnow)
                model = Column(String)
                tokens = Column(Integer)
                cost = Column(Float)
                endpoint = Column(String)
                success = Column(Integer)
                error = Column(String, nullable=True)
            
            class AnalysisRun(Base):
                """Track analysis runs."""
                __tablename__ = 'analysis_runs'
                
                id = Column(Integer, primary_key=True)
                timestamp = Column(DateTime, default=datetime.utcnow)
                target_path = Column(String)
                files_analyzed = Column(Integer)
                total_tokens = Column(Integer)
                total_cost = Column(Float)
                results = Column(JSON)
                status = Column(String)
            
            def init_db():
                """Initialize database."""
                db_path = Path("crews/core/output/db/monitoring.db")
                db_path.parent.mkdir(parents=True, exist_ok=True)
                engine = create_engine(f'sqlite:///{db_path}')
                Base.metadata.create_all(engine)
                return engine
    
    2_setup_dashboard:
      description: "Setup monitoring dashboard"
      changes:
        - type: "create_module"
          target: "code_analyzer/monitoring/dashboard.py"
          content: |
            """FastAPI monitoring dashboard."""
            from fastapi import FastAPI, WebSocket
            from fastapi.staticfiles import StaticFiles
            from fastapi.templating import Jinja2Templates
            from pathlib import Path
            from .models import init_db, APICall, AnalysisRun
            from sqlalchemy.orm import sessionmaker
            
            app = FastAPI(title="CODE_ANALYZER Monitor")
            templates = Jinja2Templates(directory="templates")
            
            @app.get("/")
            async def dashboard(request):
                """Serve dashboard."""
                engine = init_db()
                Session = sessionmaker(bind=engine)
                session = Session()
                return templates.TemplateResponse(
                    "dashboard.html",
                    {
                        "request": request,
                        "api_calls": session.query(APICall).limit(100).all(),
                        "analysis_runs": session.query(AnalysisRun).limit(100).all()
                    }
                ) 